//@version=5
indicator(title='OB+PVP+Weeknd+Opens+NYO', overlay=true, precision=4, linktoseries=true, max_bars_back=1000, max_lines_count=500)

bool        pv2_sv          = input.bool        (false,                          title='Plot 2nd order pivots')
bool        msb_sv          = input.bool        (false,                           title='Plot MSB lines')
bool        box_sv          = input.bool        (false,                           title='Plot Orderblocks')
bool        m_sv            = input.bool        (false,                          title='Plot Breakerblocks')
bool        range_sv        = input.bool        (true,                           title='Plot Range')
bool        range_eq_sv     = input.bool        (true,                           title='Plot Range 0.5 Line')
bool        range_q_sv      = input.bool        (true,                           title='Plot Range 0.25 and 0.75 Lines')
bool        log_sv          = input.bool        (false,                          title='Use Log Scale')
bool        msb_a_sv        = input.bool        (false,                          title='Alert MSB')
bool        ob_a_sv         = input.bool        (false,                          title='Alert Orderblock test')
bool        bb_a_sv         = input.bool        (false,                          title='Alert Breakerblock test')
bool        r_a_sv          = input.bool        (false,                          title='Alert New Range')
bool        rt_a_sv         = input.bool        (false,                          title='Alert Range test')
color       u_s             = input.color       (color.new(#089981, 70),         title='Untested Supply Color')
color       t_s             = input.color       (color.new(#b2b5be, 70),         title='Tested Supply Color')
color       u_d             = input.color       (color.new(#f23645, 70),         title='Untested Demand Color')
color       t_d             = input.color       (color.new(#b2b5be, 70),         title='Tested Demand Color')
color       u_b             = input.color       (color.new(#ff9800, 70),         title='Untested Breaker Color')
color       t_b             = input.color       (color.new(#b2b5be, 70),         title='Tested Breaker Color')

var float[] pvh1_price      = array.new_float   (30, na)            // high
var int[]   pvh1_time       = array.new_int     (30, na)
var float[] pvl1_price      = array.new_float   (30, na)            // low
var int[]   pvl1_time       = array.new_int     (30, na)
var float[] pvh2_price      = array.new_float   (10, na)            // higher high
var int[]   pvh2_time       = array.new_int     (10, na)
var float[] pvl2_price      = array.new_float   (10, na)            // lower low
var int[]   pvl2_time       = array.new_int     (10, na)
var float   htcmrll_price   = na                                    // high that created most recent ll
var int     htcmrll_time    = na
var float   ltcmrhh_price   = na                                    // low that created most recent hh
var int     ltcmrhh_time    = na
var box[]   long_boxes      = array.new_box()                       // orderblocks
var box[]   short_boxes     = array.new_box()
var box[]   m_long_boxes    = array.new_box()                       // breakerblocks
var box[]   m_short_boxes   = array.new_box()
var line[]  bull_bos_lines  = array.new_line()                      // MSB lines
var line[]  bear_bos_lines  = array.new_line()
var line[]  range_h_lines   = array.new_line()                      // Range lines
var line[]  range_25_lines  = array.new_line()
var line[]  range_m_lines   = array.new_line()
var line[]  range_75_lines  = array.new_line()
var line[]  range_l_lines   = array.new_line()
var label[] la_ph2          = array.new_label()                     // 2nd order pivots
var label[] la_pl2          = array.new_label()
var float   temp_pv_0       = na
var float   temp_pv_1       = na
var float   temp_pv_2       = na
var int     temp_time       = na
var float   last_range_h    = na
var float   last_range_l    = na
var line    range_m         = na
var line    range_25        = na
var line    range_75        = na
var float   box_top         = na
var float   box_bottom      = na
var int     h_a_time        = 0
var int     l_a_time        = 0
var int     mh_a_time       = 0
var int     ml_a_time       = 0
var int     rh_a_time       = 0
var int     rl_a_time       = 0
bool        pvh             = high < high[1] and high[1] > high[2]
bool        pvl             = low > low[1] and low[1] < low[2]
int         pv1_time        = bar_index[1]
float       pv1_high        = high[1]
float       pv1_low         = low[1]
bool        new_ph_2nd      = false
bool        new_pl_2nd      = false
string      alert           = na

multiplier = input.float(3, minval=0, maxval=10, step=0.1, group = "Weekend")

day_clr = dayofweek < 2 or dayofweek > 6 ? color.new(#9598a1, 55) : color.new(#9598a1, 100)
plot(((high / low) * ohlc4) * (1 + multiplier / 100), style=plot.style_line, color=day_clr)
plot(((low / high) * ohlc4) * (1 - multiplier / 100), style=plot.style_line, color=day_clr)

if barstate.isconfirmed
    if pvh
        array.pop(pvh1_price)
        array.pop(pvh1_time)
        array.unshift(pvh1_price, pv1_high)
        array.unshift(pvh1_time, pv1_time)
        if array.size(pvh1_price) > 2
            temp_pv_0 := array.get(pvh1_price, 0)
            temp_pv_1 := array.get(pvh1_price, 1)
            temp_pv_2 := array.get(pvh1_price, 2)
            if temp_pv_0 < temp_pv_1 and temp_pv_1 > temp_pv_2
                array.pop(pvh2_price)
                array.pop(pvh2_time)
                array.unshift(pvh2_price, temp_pv_1)
                array.unshift(pvh2_time, array.get(pvh1_time, 1))
                new_ph_2nd := true
                if temp_pv_1 > array.get(pvh2_price, 1)
                    for i = 0 to array.size(pvl2_time) - 1 by 1
                        temp_ltcmrhh_time = array.get(pvl2_time, i)
                        if temp_ltcmrhh_time < array.get(pvh2_time, 0)
                            ltcmrhh_price := array.get(pvl2_price, i)
                            ltcmrhh_time := temp_ltcmrhh_time
                            break
            if temp_pv_0 < ltcmrhh_price
                if msb_sv
                    array.push(bear_bos_lines, line.new(x1=ltcmrhh_time, y1=ltcmrhh_price, x2=bar_index, y2=ltcmrhh_price, color=color.green, width=2))
                box_top := array.get(pvh2_price, 0)
                box_bottom := math.max(low[bar_index - array.get(pvh2_time, 0)], low[bar_index - array.get(pvh2_time, 0) + 1])
                array.push(short_boxes, box.new(left=array.get(pvh2_time, 0), top=box_top, right=bar_index, bottom=box_bottom, bgcolor= box_sv ? u_s : na , border_color=na, extend=extend.right))
                if msb_a_sv
                    alert := alert + 'Bearish MSB @ ' + str.tostring(ltcmrhh_price) + '\n' + 'New Supply Zone : '+ str.tostring(box_top) + ' - ' + str.tostring(box_bottom) + '\n'
                ltcmrhh_price := na
    if pvl
        array.pop(pvl1_price)
        array.pop(pvl1_time)
        array.unshift(pvl1_price, pv1_low)
        array.unshift(pvl1_time, pv1_time)
        if array.size(pvl1_price) > 2
            temp_pv_0 := array.get(pvl1_price, 0)
            temp_pv_1 := array.get(pvl1_price, 1)
            temp_pv_2 := array.get(pvl1_price, 2)
            if temp_pv_0 > temp_pv_1 and temp_pv_1 < temp_pv_2
                array.pop(pvl2_price)
                array.pop(pvl2_time)
                array.unshift(pvl2_price, temp_pv_1)
                array.unshift(pvl2_time, array.get(pvl1_time, 1))
                new_pl_2nd := true
                if temp_pv_1 < array.get(pvl2_price, 1)
                    for i = 0 to array.size(pvh2_time) - 1 by 1
                        temp_htcmrll_time = array.get(pvh2_time, i)
                        if temp_htcmrll_time < array.get(pvl2_time, 0)
                            htcmrll_price := array.get(pvh2_price, i)
                            htcmrll_time := temp_htcmrll_time
                            break
            if temp_pv_0 > htcmrll_price
                if msb_sv
                    array.push(bull_bos_lines, line.new(x1=htcmrll_time, y1=htcmrll_price, x2=bar_index, y2=htcmrll_price, color=color.red, width=2))
                box_top := math.min(high[bar_index - array.get(pvl2_time, 0)], high[bar_index - array.get(pvl2_time, 0) + 1])
                box_bottom := array.get(pvl2_price, 0)
                array.push(long_boxes, box.new(left=array.get(pvl2_time, 0), top=box_top, right=bar_index, bottom=box_bottom, bgcolor= box_sv ? u_d : na, border_color=na, extend=extend.right))
                if msb_a_sv
                    alert := alert + 'Bullish MSB @ ' + str.tostring(htcmrll_price) + '\n' + 'New Demand Zone : '+ str.tostring(box_bottom) + ' - ' + str.tostring(box_top) + '\n'
                htcmrll_price := na
    if array.size(short_boxes) > 0
        for i = array.size(short_boxes) - 1 to 0 by 1
            tbox = array.get(short_boxes, i)
            top = box.get_top(tbox)
            bottom = box.get_bottom(tbox)
            ago = box.get_left(tbox)
            if array.get(pvh1_price, 0) > bottom 
                if box_sv
                    box.set_bgcolor(tbox, t_s)    
                if ob_a_sv and close < bottom
                    if array.get(pvh1_time, 0) != h_a_time
                        h_a_time := array.get(pvh1_time, 0)
                        alert := alert + 'Supply Zone Test @ ' + str.tostring(array.get(pvh1_price, 0)) + ' (age = ' + str.tostring(bar_index-ago) + ' bars) \n'
            if array.get(pvl1_price, 0) > top
                if m_sv
                    box.set_bgcolor(tbox, u_b)
                    array.push(m_long_boxes, tbox)
                else
                    box.delete(tbox)
                array.remove(short_boxes, i)
                if msb_sv    
                    line.delete(array.get(bear_bos_lines, i))
                    array.remove(bear_bos_lines, i)
    if array.size(long_boxes) > 0
        for i = array.size(long_boxes) - 1 to 0 by 1
            lbox = array.get(long_boxes, i)
            top = box.get_top(lbox)
            bottom = box.get_bottom(lbox)
            ago = box.get_left(lbox)
            if array.get(pvl1_price, 0) < top
                if box_sv
                    box.set_bgcolor(lbox, t_d)
                if ob_a_sv and close > top
                    if array.get(pvl1_time, 0) != l_a_time
                        l_a_time := array.get(pvl1_time, 0)
                        alert := alert + 'Demand Zone Test @ ' + str.tostring(array.get(pvl1_price, 0)) + ' (age = ' + str.tostring(bar_index-ago) + ' bars) \n'
            if array.get(pvh1_price, 0) < bottom
                if m_sv
                    box.set_bgcolor(lbox, u_b)
                    array.push(m_short_boxes, lbox)
                else
                    box.delete(lbox)
                array.remove(long_boxes, i)
                if msb_sv
                    line.delete(array.get(bull_bos_lines, i))
                    array.remove(bull_bos_lines, i)
    if array.size(m_short_boxes) > 0
        for i = array.size(m_short_boxes) - 1 to 0 by 1
            tbox = array.get(m_short_boxes, i)
            top = box.get_top(tbox)
            bottom = box.get_bottom(tbox)
            ago = box.get_left(tbox)
            if array.get(pvh1_price, 0) > bottom 
                box.set_bgcolor(tbox, t_b)
                if bb_a_sv and close < bottom
                    if array.get(pvh1_time, 0) != mh_a_time
                        mh_a_time := array.get(pvh1_time, 0)
                        alert := alert + 'Breakerblock Test Up @ ' + str.tostring(array.get(pvh1_price, 0)) + ' (age = ' + str.tostring(bar_index-ago) + ' bars) \n'
            if array.get(pvl1_price, 0) > top
                box.delete(tbox)
                array.remove(m_short_boxes, i)
    if array.size(m_long_boxes) > 0
        for i = array.size(m_long_boxes) - 1 to 0 by 1
            lbox = array.get(m_long_boxes, i)
            top = box.get_top(lbox)
            bottom = box.get_bottom(lbox)
            ago = box.get_left(lbox)
            if array.get(pvl1_price, 0) < top
                box.set_bgcolor(lbox, t_b)
                if bb_a_sv and close > top
                    if array.get(pvl1_time, 0) != ml_a_time
                        ml_a_time := array.get(pvl1_time, 0)
                        alert := alert + 'Breakerblock Test Down @ ' + str.tostring(array.get(pvl1_price, 0)) + ' (age = ' + str.tostring(bar_index-ago) + ' bars) \n'
            if array.get(pvh1_price, 0) < bottom
                box.delete(lbox)
                array.remove(m_long_boxes, i)
    if range_sv and (new_ph_2nd or new_pl_2nd) and (array.get(pvh2_price, 0) < array.get(pvh2_price, 1) and array.get(pvl2_price, 0) > array.get(pvl2_price, 1) and array.get(pvh2_price, 0) > array.get(pvl2_price, 1) and array.get(pvl2_price, 0) < array.get(pvh2_price, 1)) and (array.get(pvl2_price, 1) > nz(last_range_h) or na(last_range_l)? true : (array.get(pvh2_price, 1) < last_range_l))
        temp_time := math.min(array.get(pvh2_time, 1), array.get(pvl2_time, 1))
        last_range_h    := array.get(pvh2_price, 1)
        last_range_l    := array.get(pvl2_price, 1)
        temp_pv_0 := log_sv ? math.exp((math.log(last_range_h) + math.log(last_range_l))/2) : (last_range_h + last_range_l)/2
        temp_pv_1 := log_sv ? math.exp((math.log(last_range_h) + math.log(temp_pv_0))/2) : (last_range_h + temp_pv_0)/2
        temp_pv_2 := log_sv ? math.exp((math.log(last_range_l) + math.log(temp_pv_0))/2) : (last_range_l + temp_pv_0)/2
        array.push(range_h_lines, line.new(x1=temp_time, y1=last_range_h, x2=bar_index, y2=last_range_h, color=color.black, width=2, extend=extend.right))
        array.push(range_l_lines, line.new(x1=temp_time, y1=last_range_l, x2=bar_index, y2=last_range_l, color=color.black, width=2, extend=extend.right))
        if range_eq_sv
            array.push(range_m_lines, line.new(x1=temp_time, y1=temp_pv_0, x2=bar_index, y2=temp_pv_0, color=color.gray, width=2, extend=extend.right))
        if range_q_sv
            array.push(range_25_lines, line.new(x1=temp_time, y1=temp_pv_1, x2=bar_index, y2=temp_pv_1, style=line.style_dashed, color=color.gray, width=1, extend=extend.right))
            array.push(range_75_lines, line.new(x1=temp_time, y1=temp_pv_2, x2=bar_index, y2=temp_pv_2, style=line.style_dashed, color=color.gray, width=1, extend=extend.right))
        if r_a_sv
            alert := alert + 'New Range : ' + str.tostring(last_range_h) + ' - ' +  str.tostring(last_range_l) + '. Mean = ' +  str.tostring(temp_pv_0) + '\n'
    if array.size(range_h_lines) > 0
        for i = array.size(range_h_lines) - 1 to 0 by 1
            range_h = array.get(range_h_lines, i)
            top = line.get_y1(range_h)
            range_l = array.get(range_l_lines, i)
            bottom = line.get_y1(range_l)
            temp_time := line.get_x1(range_h)
            if array.get(pvh1_price, 0) > top
                if rt_a_sv and close < top
                    if array.get(pvh1_time, 0) != rh_a_time
                        rh_a_time := array.get(pvh1_time, 0)
                        alert := alert + 'Range High Test @ ' + str.tostring(array.get(pvh1_price, 0)) + ' \n'
            if array.get(pvl1_price, 0) < bottom
                if rt_a_sv and close > bottom
                    if array.get(pvl1_time, 0) != rl_a_time
                        rl_a_time := array.get(pvl1_time, 0)
                        alert := alert + 'Range Low Test @ ' + str.tostring(array.get(pvl1_price, 0)) + ' \n'
            if range_eq_sv
                range_m := array.get(range_m_lines, i)
            if range_q_sv
                range_25 := array.get(range_25_lines, i)
                range_75 := array.get(range_75_lines, i)
            if array.get(pvh1_price, 0) < bottom or array.get(pvl1_price, 0) > top
                line.delete(range_h)
                array.remove(range_h_lines, i)
                line.delete(range_l)
                array.remove(range_l_lines, i)
                if range_eq_sv
                    line.delete(range_m)                
                    array.remove(range_m_lines, i)
                if range_q_sv
                    line.delete(range_25)                
                    array.remove(range_25_lines, i)
                    line.delete(range_75)                
                    array.remove(range_75_lines, i)
                last_range_h    := na
                last_range_l    := na
    if pv2_sv
        if new_ph_2nd
            array.push(la_ph2, label.new(x = array.get(pvh2_time, 0), y = array.get(pvh2_price, 0), xloc = xloc.bar_index, style = label.style_label_down,    color = #770000FF, size = size.tiny))
        if new_pl_2nd
            array.push(la_pl2, label.new(x = array.get(pvl2_time, 0), y = array.get(pvl2_price, 0), xloc = xloc.bar_index, style = label.style_label_up,      color = #007700FF, size = size.tiny))


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

iMDisplay = input.bool    (true, "Display", group="New York Midnight Open")
iMTime    = input.session ('0400-0405:1234567', "Session", group="New York Midnight Open")
iMStyle   = input.string  ("Dashed", "Line Style", options=["Solid", "Dotted", "Dashed"], group="New York Midnight Open")
iMColor   = input.color   (#58A2B0, "Color", group="New York Midnight Open")
iMHistory = input.bool    (false, "History", group="New York Midnight Open")
iMLabel   = input.bool    (true, "Show Label", group="New York Midnight Open")

i8Display = input.bool    (true, "Display", group="New York 8:30 Open")
i8Time    = input.session ('1230-1235:1234567', "Session", group="New York 8:30 Open")
i8Style   = input.string  ("Dotted", "Line Style", options=["Solid", "Dotted", "Dashed"], group="New York 8:30 Open")
i8Color   = input.color   (#58A2B0, "Color", group="New York 8:30 Open")
i8History = input.bool    (false, "History", group="New York 8:30 Open")
i8Label   = input.bool    (true, "Show Label", group="New York 8:30 Open")

tMidnight = time          ("1", iMTime)
t830      = time          ("1", i8Time)

_MStyle   = iMStyle ==    "Solid" ? line.style_solid : iMStyle == "Dotted" ? line.style_dotted : line.style_dashed
_8Style   = i8Style ==    "Solid" ? line.style_solid : i8Style == "Dotted" ? line.style_dotted : line.style_dashed

//==== Midnight Open ====
if iMDisplay
    var openMidnight  = 0.0
    if tMidnight
        if not tMidnight[1]
            openMidnight  := open
        else
            openMidnight := math.max(open, openMidnight)

    var label lb = na
    var line lne = na
    if openMidnight != openMidnight[1]
        if barstate.isconfirmed
            line.set_x2(lne, tMidnight)
            lne := line.new(tMidnight, openMidnight, last_bar_time + 14400000/2, openMidnight, xloc.bar_time, extend.none, iMColor, _MStyle, 1)
            if iMLabel
                lb  := label.new(last_bar_time + 14400000/2, openMidnight, "Midnight", xloc.bar_time, yloc.price, na, label.style_none, iMColor, size.normal, text.align_right)
            label.delete(lb[1])
            if not iMHistory
                line.delete(lne[1])
//===========================


//==== 8:30 Open ====
if i8Display
    var open830  = 0.0
    if t830
        if not t830[1]
            open830  := open
        else
            open830 := math.max(open, open830)

    var label lb2 = na
    var line lne2 = na
    if open830 != open830[1]
        if barstate.isconfirmed
            line.set_x2(lne2, t830 - 30600000)
            lne2 := line.new(t830, open830, last_bar_time + 14400000/2, open830, xloc.bar_time, extend.none, i8Color, _8Style, 1)
            if i8Label
                lb2  := label.new(last_bar_time + 14400000/2, open830, "8:30", xloc.bar_time, yloc.price, na, label.style_none, i8Color, size.normal, text.align_right)
            label.delete(lb2[1])
            if not i8History
                line.delete(lne2[1])
//===========================

// ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— \\
// —————— Tips
TTmode       = 'Data Type - Choose Single or Aggregated data.'
TTspot       = 'Spot Volume Pairs'
TTperp       = 'Futures Volume Pairs'
TTEX         = 'You can write any name of the exchange in any field in the Exchanges group and get the result. Example: BITMEX\nHUOBI\nMEXC\nGATEIO and others. \n*Be careful and check if there is such a ticker on TV.'

// —————— Inputs
groupset     = 'SETTINGS'
coinusd      = input.string('USD',           'Volume By',                          group = groupset, inline = 'MODE', options = ['COIN', 'USD'])
datatype     = input.string('Aggregated',    'Data Type',                          group = groupset, inline = 'MODE', options = ['Aggregated', 'Single'], tooltip = TTmode)
delta_type   = input.string('Both',          'Delta Type',                         group = groupset, inline = 'DELT', options = ['Both', 'Bullish', 'Bearish'])
lookback     = input.int   (250,             'Volume Lookback Depth',              group = groupset, minval = 10, maxval = 1000, step = 10)
max_bars     = input.int   (500,             'Number of Bars',                     group = groupset, minval = 10, maxval = 500, step = 25)
bar_mult     = input.int   (35,              'Bar Length Multiplier',              group = groupset, minval = 10, maxval = 100, step = 5)
bar_offset   = input.int   (35,              'Bar Horizontal Offset',              group = groupset, minval = 0, maxval = 100, step = 5)
bar_width    = input.int   (1,               'Bar Width',                          group = groupset, minval = 1, maxval = 20)
poc_show     = input.bool  (true,            'Show POC Line',                      group = groupset, inline = 'DELT')
bar_color    = input.color (#335367,       'Bar Color',                          group = groupset, inline = 'COLR')
poc_color    = input.color (#a13c44,       'POC Color',                          group = groupset, inline = 'COLR')

groupcur     = '➤Currency'
PERP1        = input.bool  (true,            'USD.P',                               group = groupcur, inline = 'CUR1')
PERP2        = input.bool  (true,            'USDT.P',                              group = groupcur, inline = 'CUR1', tooltip = TTperp)
SPOT1        = input.bool  (true,            'USDT',                                group = groupcur, inline = 'CUR2')
SPOT2        = input.bool  (true,            'USDC',                                group = groupcur, inline = 'CUR2')

groupexc     = '➤Exchanges'
EX_NO1       = input.bool  (true,            '1',                                   group = groupexc, inline = 'EX1')
IN_NO1       = input.string('BINANCE',       '',                                    group = groupexc, inline = 'EX1')
EX_NO2       = input.bool  (true,            '2',                                   group = groupexc, inline = 'EX1')
IN_NO2       = input.string('BYBIT',         '',                                    group = groupexc, inline = 'EX1')
EX_NO3       = input.bool  (true,            '3',                                   group = groupexc, inline = 'EX1')
IN_NO3       = input.string('OKEX',          '',                                    group = groupexc, inline = 'EX1')
EX_NO4       = input.bool  (true,            '4',                                   group = groupexc, inline = 'EX2')
IN_NO4       = input.string('COINBASE',      '',                                    group = groupexc, inline = 'EX2')
EX_NO5       = input.bool  (true,            '5',                                   group = groupexc, inline = 'EX2')
IN_NO5       = input.string('BITFINEX',      '',                                    group = groupexc, inline = 'EX2')
EX_NO6       = input.bool  (true,            '6',                                   group = groupexc, inline = 'EX2')
IN_NO6       = input.string('BITSTAMP',      '',                                    group = groupexc, inline = 'EX2', tooltip = TTEX)

// ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— \\
// —————— Aggregated Volume Calculate
Vtype = str.lower(syminfo.volumetype)
CurrentVolume = Vtype=='tick' or Vtype=='quote' or Vtype=='usd' ? volume / close : volume

GetTicker(exchange, typeSymbol) =>
    GetTicker = exchange + ':' + syminfo.basecurrency + typeSymbol
    FixBitmex = exchange == 'BITMEX' ? str.replace(GetTicker, 'BTC', 'XBT') : GetTicker
    Ticker    = FixBitmex

GetRequest(Ticker) =>
    GetVolume = request.security(Ticker, timeframe.period, CurrentVolume, ignore_invalid_symbol=true)
    CheckVolume = GetVolume[1] > 0 ? GetVolume : 0

GetExchange(typeSymbol)=>
    EX_1 = EX_NO1 ? GetRequest( GetTicker(IN_NO1, typeSymbol) ) : 0
    EX_2 = EX_NO2 ? GetRequest( GetTicker(IN_NO2, typeSymbol) ) : 0
    EX_3 = EX_NO3 ? GetRequest( GetTicker(IN_NO3, typeSymbol) ) : 0
    EX_4 = EX_NO4 ? GetRequest( GetTicker(IN_NO4, typeSymbol) ) : 0
    EX_5 = EX_NO5 ? GetRequest( GetTicker(IN_NO5, typeSymbol) ) : 0
    EX_6 = EX_NO6 ? GetRequest( GetTicker(IN_NO6, typeSymbol) ) : 0
    [EX_1, EX_2, EX_3, EX_4, EX_5, EX_6]

EditVolume(type)=>
    Type = array.sum(type)
    Volume = coinusd == 'USD' ? Type*close : Type
    Volume

// —————— Get Volume 
[PERP2_1, PERP2_2, PERP2_3, PERP2_4, PERP2_5, PERP2_6] = GetExchange(PERP1 ? 'USDT.P' : '0')
[PERP1_1, PERP1_2, PERP1_3, PERP1_4, PERP1_5, PERP1_6] = GetExchange(PERP2 ? 'USD.P'  : '0')
[SPOT1_1, SPOT1_2, SPOT1_3, SPOT1_4, SPOT1_5, SPOT1_6] = GetExchange(SPOT1 ? 'USDT'   : '0')
[SPOT2_1, SPOT2_2, SPOT2_3, SPOT2_4, SPOT2_5, SPOT2_6] = GetExchange(SPOT2 ? 'USDC'   : '0')

// —————— Processing Volume
GetSpotEX_1 = EditVolume(array.from(SPOT1_1, SPOT2_1)),     GetPerpEX_1 = EditVolume(array.from(PERP1_1, PERP2_1))
GetSpotEX_2 = EditVolume(array.from(SPOT1_2, SPOT2_2)),     GetPerpEX_2 = EditVolume(array.from(PERP1_2, PERP2_2))
GetSpotEX_3 = EditVolume(array.from(SPOT1_3, SPOT2_3)),     GetPerpEX_3 = EditVolume(array.from(PERP1_3, PERP2_3))
GetSpotEX_4 = EditVolume(array.from(SPOT1_4, SPOT2_4)),     GetPerpEX_4 = EditVolume(array.from(PERP1_4, PERP2_4))
GetSpotEX_5 = EditVolume(array.from(SPOT1_5, SPOT2_5)),     GetPerpEX_5 = EditVolume(array.from(PERP1_5, PERP2_5))
GetSpotEX_6 = EditVolume(array.from(SPOT1_6, SPOT2_6)),     GetPerpEX_6 = EditVolume(array.from(PERP1_6, PERP2_6))

SPOT   = GetSpotEX_1 + GetSpotEX_2 + GetSpotEX_3 + GetSpotEX_4 + GetSpotEX_5 + GetSpotEX_6
PERP   = GetPerpEX_1 + GetPerpEX_2 + GetPerpEX_3 + GetPerpEX_4 + GetPerpEX_5 + GetPerpEX_6
Volume = datatype == 'Single' ? EditVolume(array.from(CurrentVolume)) : SPOT + PERP + (EditVolume(array.from(CurrentVolume)))

// ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— \\
// —————————————————————————————————————————————————   Volume Profile   ——————————————————————————————————————————————————— \\
// ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— \\
float Vmax = 0.0
int VmaxId = 0
var int first = time
price_levels = array.new_float(max_bars + 1, 0.0)
interval_volumes = array.new_float(max_bars, 0.0)
volumes_totals = array.new_float(max_bars, 0.0)
bar_widths = array.new_int(max_bars, 0)

float HH = ta.highest(high, lookback)
float LL = ta.lowest(low, lookback)

if barstate.islast
    float HL = (HH - LL) / max_bars
    for j = 1 to max_bars + 1 by 1
        array.set(price_levels, j - 1, LL + HL * j)
    for i = 0 to lookback - 1 by 1
        int j_interval_count = 0
        array.fill(volumes_totals, 0.0)
        for j = 0 to max_bars - 1 by 1
            float j_price_level = array.get(price_levels, j)
            if low[i] < j_price_level and high[i] > j_price_level and (delta_type == 'Bullish' ? close[i] >= open[i] : delta_type == 'Bearish' ? close[i] <= open[i] : true)
                float j_volumes_totals = array.get(volumes_totals, j)
                float new_volume_total = j_volumes_totals + nz(Volume[i])
                array.set(volumes_totals, j, new_volume_total)
                j_interval_count += 1
                j_interval_count
        for j = 0 to max_bars - 1 by 1
            float j_interval_volume = array.get(interval_volumes, j)
            float j_volumes_totals = array.get(volumes_totals, j)
            float dj_interval_volume = j_interval_volume + (j_interval_count > 0 ? j_volumes_totals / j_interval_count : 0.0)
            array.set(interval_volumes, j, dj_interval_volume)
    Vmax := array.max(interval_volumes)
    VmaxId := array.indexof(interval_volumes, Vmax)
    for j = 0 to max_bars - 1 by 1
        float j_interval_volume = array.get(interval_volumes, j)
        int j_bar_widths = math.round(bar_mult * j_interval_volume / Vmax)
        array.set(bar_widths, j, j_bar_widths)

if barstate.isfirst
    first := time
    first
change = ta.change(time)
x_loc = timenow + math.round(change * bar_offset)

f_setup_bar(n) =>
    x1 = VmaxId == n and poc_show ? math.max(time[lookback], first) : timenow + math.round(change * (bar_offset - array.get(bar_widths, n)))
    ys = array.get(price_levels, n)
    line.new(x1=x1, y1=ys, x2=x_loc, y2=ys, xloc=xloc.bar_time, extend=extend.none, color=VmaxId == n ? poc_color : bar_color, style=line.style_solid, width=bar_width)

if barstate.islast
    for i = 0 to max_bars - 1 by 1
        f_setup_bar(i)

// ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— \\

//Chart Champions

NoLabel = input.bool(false, title='No Label Option ', tooltip='Option to have no Label Box')
//Generic
NoLabelOption = NoLabel ? label.style_none : label.style_label_left
PriceLocation = NoLabel ? '                          ' : ''
PriceLocation1 = NoLabel ? '                                 ' : ''
LabelSize = NoLabel ? size.normal : size.small

//Line Colors
DanCCDailyInputColor = input.color(color.blue, title='Daily', group='User Selectable Line Colors', inline='Input 0')
DanCCWeeklyInputColor = input.color(color.yellow, title='Weekly', group='User Selectable Line Colors', inline='Input 0')
DanCCMonthlyInputColor = input.color(color.purple, title='Monthly', group='User Selectable Line Colors', inline='Input 0')


//Daily Open
DVWAPTxtLabelColor = NoLabel ? DanCCDailyInputColor : color.white
WVWAPTxtLabelColor = NoLabel ? DanCCWeeklyInputColor : color.black
MVWAPTxtLabelColor = NoLabel ? DanCCMonthlyInputColor : color.white
A48VWAPTxtLabelColor = NoLabel ? color.navy : color.white
A24VWAPTxtLabelColor = NoLabel ? color.blue : color.white

/////////////////////////////////VWAPs
show_DVWAPs = input.bool(false, title='Daily', group='Standard VWAPS - Daily, Weekly, Monthly', inline='VWAP1')
show_WVWAPs = input.bool(false, title='Weekly', group='Standard VWAPS - Daily, Weekly, Monthly', inline='VWAP1')
show_MVWAPs = input.bool(false, title='Monthly', group='Standard VWAPS - Daily, Weekly, Monthly', inline='VWAP1', tooltip='M-VWAP only shows on the 5 min and above timeframe / \'Live 24\' hour constantly updating VWAP')

show_pdDVWAPs = input.bool(false, title='Previous Day Close', group='Optional VWAPS', inline='VWAP1')
show_Live24VWAPs = input.bool(false, title='Live 24', group='Optional VWAPS', inline='VWAP1')
show_48VWAPs = input.bool(false, title='2D', group='Optional VWAPS', inline='VWAP1', tooltip='pdVWAP = Previous Day VWAP CLosing Price / \'Live 24\' hour constantly updating VWAP / Rolling 2 day VWAP')

show_pdDVWAPs_color = show_pdDVWAPs ? DanCCDailyInputColor : na
show_pdDVWAPs_text = show_pdDVWAPs ? DVWAPTxtLabelColor : na
show_DVWAPs_color = show_DVWAPs ? DanCCDailyInputColor : na
show_DVWAPs_text = show_DVWAPs ? DVWAPTxtLabelColor : na

show_48VWAPs_color = show_48VWAPs ? color.navy : na
show_48VWAPs_text = show_48VWAPs ? A48VWAPTxtLabelColor : na

show_Live24VWAPs_color = show_Live24VWAPs ? color.blue : na
show_Live24VWAPs_text = show_Live24VWAPs ? A24VWAPTxtLabelColor : na

show_WVWAPs_color = show_WVWAPs ? DanCCWeeklyInputColor : na
show_WVWAPs_text = show_WVWAPs ? WVWAPTxtLabelColor : na
show_MVWAPs_color = show_MVWAPs ? DanCCMonthlyInputColor : na
show_MVWAPs_text = show_MVWAPs ? MVWAPTxtLabelColor : na

is_today = year == year(timenow) and month == month(timenow) and dayofmonth == dayofmonth(timenow)


///VWAP rounding issue resolution 
f_round_up_to_tick(x, mintick) =>
    mult = 1 / mintick
    value = math.ceil(x * mult) / mult
    value

f_round_down_to_tick(x, mintick) =>
    mult = 1 / mintick
    value = math.floor(x * mult) / mult
    value
/////////////////////////////////////////////////

//Daily VWAP
roundedVWAP = f_round_up_to_tick(ta.vwap, syminfo.mintick)
VWAP = roundedVWAP
//VWAP = round(vwap)
plot(VWAP, 'D-VWAP', is_today ? show_DVWAPs_color : na, offset=0)
var label VWAPLabel = na
VWAPLabel := label.new(timenow, VWAP, xloc=xloc.bar_time, text=PriceLocation + 'D-VWAP -   ' + str.tostring(VWAP), color=show_DVWAPs_color, textcolor=show_DVWAPs_text, style=NoLabelOption, size=LabelSize)
label.delete(VWAPLabel[1])


//Previous Day's Closing Vwap
newday(res) =>
    t = time(res)
    ta.change(t) != 0 ? 1 : 0
new_day = newday('D')
pdVWAP = ta.valuewhen(new_day, VWAP[1], 0)
plot(pdVWAP, 'pdVWAP', is_today ? show_pdDVWAPs_color : na, offset=0)

//plot(pdVWAP, "pdVWAP", change(pdVWAP) ? na : show_DVWAPs_color,  offset = 0)
var label pdVWAPLabel = na
pdVWAPLabel := label.new(timenow, pdVWAP, xloc=xloc.bar_time, text=PriceLocation + 'pdVWAP -   ' + str.tostring(pdVWAP), color=show_pdDVWAPs_color, textcolor=show_pdDVWAPs_text, style=NoLabelOption, size=LabelSize)
label.delete(pdVWAPLabel[1])

//Weeekly VWAP
src = hlc3
wt = time('W')

wstart = na(wt[1]) or wt > wt[1]

wsumSrc = src * volume
wsumVol = volume
wsumSrc := wstart ? wsumSrc : wsumSrc + wsumSrc[1]
wsumVol := wstart ? wsumVol : wsumVol + wsumVol[1]

WVWAP = wsumSrc / wsumVol
wvw = f_round_up_to_tick(WVWAP, syminfo.mintick)

plot(timeframe.isintraday ? wvw : na, title='W-VWAP', color=show_WVWAPs_color)
var label wVWAPLabel = na
wVWAPLabel := label.new(timenow, timeframe.isintraday ? wvw : na, xloc=xloc.bar_time, text=PriceLocation + 'W-VWAP -   ' + str.tostring(timeframe.isintraday ? wvw : na), color=show_WVWAPs_color, textcolor=show_WVWAPs_text, style=NoLabelOption, size=LabelSize)
label.delete(wVWAPLabel[1])


//Monthly VWAP

var float vwapsum = na
var float volumesum = na

newSession = ta.change(time('M'))

vwapsum := newSession ? hl2 * volume : hl2 * volume + vwapsum[1]
volumesum := newSession ? volume : volume + volumesum[1]

MVWAP = vwapsum / volumesum
mvw = f_round_up_to_tick(MVWAP, syminfo.mintick)

plot(newSession ? na : mvw, title='M-VWAP', color=show_MVWAPs_color, style=plot.style_linebr)
var label mVWAPLabel = na
mVWAPLabel := label.new(timenow, timeframe.isintraday ? mvw : na, xloc=xloc.bar_time, text=PriceLocation + 'M-VWAP -   ' + str.tostring(timeframe.isintraday ? mvw : na), color=show_MVWAPs_color, textcolor=show_MVWAPs_text, style=NoLabelOption, size=LabelSize)
label.delete(mVWAPLabel[1])
/////////////////////////////////////////////////////////////////////


/////////////////////////2D VWAP
source = hlc3

StartSun_session = na(time(timeframe.period, '0000-0000:7'))
ShowMon_session = na(time(timeframe.period, '0000-0000:2'))

SMsumSrc = source * volume
SMsumVol = volume
SMsumSrc := StartSun_session and not StartSun_session[1] ? SMsumSrc : SMsumSrc + SMsumSrc[1]
SMsumVol := StartSun_session and not StartSun_session[1] ? SMsumVol : SMsumVol + SMsumVol[1]

StartSun_condition = StartSun_session and not StartSun_session[1] ? na : StartSun_session and is_today ? SMsumSrc / SMsumVol : na

plot(StartSun_condition and not ShowMon_session ? StartSun_condition : na, title='Sun-2DVWAP', color=show_48VWAPs_color, linewidth=2, style=plot.style_linebr)
StartSunLabel = label.new(timenow, StartSun_condition and not ShowMon_session ? StartSun_condition : na, xloc=xloc.bar_time, text=PriceLocation1 + 'Sun-2DVWAP - ' + str.tostring(f_round_up_to_tick(StartSun_condition, syminfo.mintick)), color=show_48VWAPs_color, textcolor=show_48VWAPs_text, style=NoLabelOption, size=LabelSize)
label.delete(StartSunLabel[1])


//Monday Start 48 hour VWAP (Displays on Tuesday)
StartMon_session = na(time(timeframe.period, '0000-0000:1'))
ShowTues_session = na(time(timeframe.period, '0000-0000:3'))

MTsumSrc = source * volume
MTsumVol = volume
MTsumSrc := StartMon_session and not StartMon_session[1] ? MTsumSrc : MTsumSrc + MTsumSrc[1]
MTsumVol := StartMon_session and not StartMon_session[1] ? MTsumVol : MTsumVol + MTsumVol[1]

StartMon_condition = StartMon_session and not StartMon_session[1] ? na : StartMon_session and is_today ? MTsumSrc / MTsumVol : na

plot(StartMon_condition and not ShowTues_session ? StartMon_condition : na, title='Mon-2DVWAP', color=show_48VWAPs_color, linewidth=2, style=plot.style_linebr)
StartMonLabel = label.new(timenow, StartMon_condition and not ShowTues_session ? StartMon_condition : na, xloc=xloc.bar_time, text=PriceLocation1 + 'Mon-2DVWAP - ' + str.tostring(f_round_up_to_tick(StartMon_condition, syminfo.mintick)), color=show_48VWAPs_color, textcolor=show_48VWAPs_text, style=NoLabelOption, size=LabelSize)
label.delete(StartMonLabel[1])


//Tuesday Start 48 hour VWAP (Displays on Wednesday)
StartTues_session = na(time(timeframe.period, '0000-0000:2'))
ShowWeds_session = na(time(timeframe.period, '0000-0000:4'))

TWsumSrc = source * volume
TWsumVol = volume
TWsumSrc := StartTues_session and not StartTues_session[1] ? TWsumSrc : TWsumSrc + TWsumSrc[1]
TWsumVol := StartTues_session and not StartTues_session[1] ? TWsumVol : TWsumVol + TWsumVol[1]

StartTues_condition = StartTues_session and not StartTues_session[1] ? na : StartTues_session and is_today ? TWsumSrc / TWsumVol : na

plot(StartTues_condition and not ShowWeds_session ? StartTues_condition : na, title='Tues-2DVWAP', color=show_48VWAPs_color, linewidth=2, style=plot.style_linebr)
StartTuesLabel = label.new(timenow, StartTues_condition and not ShowWeds_session ? StartTues_condition : na, xloc=xloc.bar_time, text=PriceLocation1 + 'Tues-2DVWAP - ' + str.tostring(f_round_up_to_tick(StartTues_condition, syminfo.mintick)), color=show_48VWAPs_color, textcolor=show_48VWAPs_text, style=NoLabelOption, size=LabelSize)
label.delete(StartTuesLabel[1])

//Wednesday Start 48 hour VWAP (Displays on Thursday)
StartWeds_session = na(time(timeframe.period, '0000-0000:3'))
ShowThurs_session = na(time(timeframe.period, '0000-0000:5'))

WTsumSrc = source * volume
WTsumVol = volume
WTsumSrc := StartWeds_session and not StartWeds_session[1] ? WTsumSrc : WTsumSrc + WTsumSrc[1]
WTsumVol := StartWeds_session and not StartWeds_session[1] ? WTsumVol : WTsumVol + WTsumVol[1]

StartWeds_condition = StartWeds_session and not StartWeds_session[1] ? na : StartWeds_session and is_today ? WTsumSrc / WTsumVol : na

plot(StartWeds_condition and not ShowThurs_session ? StartWeds_condition : na, title='Weds-2DVWAP', color=show_48VWAPs_color, linewidth=2, style=plot.style_linebr)
StartWedsLabel = label.new(timenow, StartWeds_condition and not ShowThurs_session ? StartWeds_condition : na, xloc=xloc.bar_time, text=PriceLocation1 + 'Weds-2DVWAP - ' + str.tostring(f_round_up_to_tick(StartWeds_condition, syminfo.mintick)), color=show_48VWAPs_color, textcolor=show_48VWAPs_text, style=NoLabelOption, size=LabelSize)
label.delete(StartWedsLabel[1])


//Thursday Start 48 hour VWAP (Displays on Friday)
StartThurs_session = na(time(timeframe.period, '0000-0000:4'))
ShowFri_session = na(time(timeframe.period, '0000-0000:6'))

TFsumSrc = source * volume
TFsumVol = volume
TFsumSrc := StartThurs_session and not StartThurs_session[1] ? TFsumSrc : TFsumSrc + TFsumSrc[1]
TFsumVol := StartThurs_session and not StartThurs_session[1] ? TFsumVol : TFsumVol + TFsumVol[1]

StartThurs_condition = StartThurs_session and not StartThurs_session[1] ? na : StartThurs_session and is_today ? TFsumSrc / TFsumVol : na

plot(StartThurs_condition and not ShowFri_session ? StartThurs_condition : na, title='Thurs-2DVWAP', color=show_48VWAPs_color, linewidth=2, style=plot.style_linebr)
StartThursLabel = label.new(timenow, StartThurs_condition and not ShowFri_session ? StartThurs_condition : na, xloc=xloc.bar_time, text=PriceLocation1 + 'Thurs-2DVWAP - ' + str.tostring(f_round_up_to_tick(StartThurs_condition, syminfo.mintick)), color=show_48VWAPs_color, textcolor=show_48VWAPs_text, style=NoLabelOption, size=LabelSize)
label.delete(StartThursLabel[1])

//Friday Start 48 hour VWAP (Displays on Saturday)
StartFri_session = na(time(timeframe.period, '0000-0000:5'))
ShowSat_session = na(time(timeframe.period, '0000-0000:7'))

FSsumSrc = source * volume
FSsumVol = volume
FSsumSrc := StartFri_session and not StartFri_session[1] ? FSsumSrc : FSsumSrc + FSsumSrc[1]
FSsumVol := StartFri_session and not StartFri_session[1] ? FSsumVol : FSsumVol + FSsumVol[1]

StartFri_condition = StartFri_session and not StartFri_session[1] ? na : StartFri_session and is_today ? FSsumSrc / FSsumVol : na

plot(StartFri_condition and not ShowSat_session ? StartFri_condition : na, title='Fri-2DVWAP', color=show_48VWAPs_color, linewidth=2, style=plot.style_linebr)
StartFriLabel = label.new(timenow, StartFri_condition and not ShowSat_session ? StartFri_condition : na, xloc=xloc.bar_time, text=PriceLocation1 + 'Fri-2DVWAP - ' + str.tostring(f_round_up_to_tick(StartFri_condition, syminfo.mintick)), color=show_48VWAPs_color, textcolor=show_48VWAPs_text, style=NoLabelOption, size=LabelSize)
label.delete(StartFriLabel[1])


//Saturday Start 48 hour VWAP (Displays on Sunday)
StartSat_session = na(time(timeframe.period, '0000-0000:6'))
ShowSun_session = na(time(timeframe.period, '0000-0000:1'))


SSsumSrc = source * volume
SSsumVol = volume
SSsumSrc := StartSat_session and not StartSat_session[1] ? SSsumSrc : SSsumSrc + SSsumSrc[1]
SSsumVol := StartSat_session and not StartSat_session[1] ? SSsumVol : SSsumVol + SSsumVol[1]

StartSat_condition = StartSat_session and not StartSat_session[1] ? na : StartSat_session and is_today ? SSsumSrc / SSsumVol : na

plot(StartSat_condition and not ShowSun_session ? StartSat_condition : na, title='Sat-2DVWAP', color=show_48VWAPs_color, linewidth=2, style=plot.style_linebr)
StartSatLabel = label.new(timenow, StartSat_condition and not ShowSun_session ? StartSat_condition : na, xloc=xloc.bar_time, text=PriceLocation1 + 'Sat-2DVWAP - ' + str.tostring(f_round_up_to_tick(StartSat_condition, syminfo.mintick)), color=show_48VWAPs_color, textcolor=show_48VWAPs_text, style=NoLabelOption, size=LabelSize)
label.delete(StartSatLabel[1])
/////////////48 Hour End


/////////24 HOUR ROLLING VWAP///////////////////////////////////////////

//VWAP 24 hour 1 min
//TF = Time Frame
TF_24_1 = timeframe.period == '1'

cumulativePeriod_24_1 = 1440

typicalPrice_24_1 = (high + low + close) / 3
typicalPriceVolume_24_1 = typicalPrice_24_1 * volume
cumulativeTypicalPriceVolume_24_1 = math.sum(typicalPriceVolume_24_1, cumulativePeriod_24_1)
cumulativeVolume_24_1 = math.sum(volume, cumulativePeriod_24_1)
vwapValue_24_1 = cumulativeTypicalPriceVolume_24_1 / cumulativeVolume_24_1

plot(vwapValue_24_1 and TF_24_1 ? vwapValue_24_1 : na, color=show_Live24VWAPs_color)
var label vwapValueLabel_24_1 = na
vwapValueLabel_24_1 := label.new(timenow, vwapValue_24_1 and TF_24_1 ? vwapValue_24_1 : na, xloc=xloc.bar_time, text=PriceLocation1 + 'Live 24 VWAP -   ' + str.tostring(f_round_up_to_tick(vwapValue_24_1, syminfo.mintick)), color=show_Live24VWAPs_color, textcolor=show_Live24VWAPs_text, style=NoLabelOption, size=LabelSize)
label.delete(vwapValueLabel_24_1[1])

//VWAP 24 hour 5 min
//TF = Time Frame
TF_24_5 = timeframe.period == '5'

cumulativePeriod_24_5 = 288

typicalPrice_24_5 = (high + low + close) / 3
typicalPriceVolume_24_5 = typicalPrice_24_5 * volume
cumulativeTypicalPriceVolume_24_5 = math.sum(typicalPriceVolume_24_5, cumulativePeriod_24_5)
cumulativeVolume_24_5 = math.sum(volume, cumulativePeriod_24_5)
vwapValue_24_5 = cumulativeTypicalPriceVolume_24_5 / cumulativeVolume_24_5

plot(vwapValue_24_5 and TF_24_5 ? vwapValue_24_5 : na, color=show_Live24VWAPs_color)
var label vwapValueLabel_24_5 = na
vwapValueLabel_24_5 := label.new(timenow, vwapValue_24_5 and TF_24_5 ? vwapValue_24_5 : na, xloc=xloc.bar_time, text=PriceLocation1 + 'Live 24 VWAP -   ' + str.tostring(f_round_up_to_tick(vwapValue_24_5, syminfo.mintick)), color=show_Live24VWAPs_color, textcolor=show_Live24VWAPs_text, style=NoLabelOption, size=LabelSize)
label.delete(vwapValueLabel_24_5[1])

//VWAP 24 hour 15 min
//TF = Time Frame
TF_24_15 = timeframe.period == '15'

cumulativePeriod_24_15 = 96

typicalPrice_24_15 = (high + low + close) / 3
typicalPriceVolume_24_15 = typicalPrice_24_15 * volume
cumulativeTypicalPriceVolume_24_15 = math.sum(typicalPriceVolume_24_15, cumulativePeriod_24_15)
cumulativeVolume_24_15 = math.sum(volume, cumulativePeriod_24_15)
vwapValue_24_15 = cumulativeTypicalPriceVolume_24_15 / cumulativeVolume_24_15

plot(vwapValue_24_15 and TF_24_15 ? vwapValue_24_15 : na, color=show_Live24VWAPs_color)
var label vwapValueLabel_24_15 = na
vwapValueLabel_24_15 := label.new(timenow, vwapValue_24_15 and TF_24_15 ? vwapValue_24_15 : na, xloc=xloc.bar_time, text=PriceLocation1 + 'Live 24 VWAP -   ' + str.tostring(f_round_up_to_tick(vwapValue_24_15, syminfo.mintick)), color=show_Live24VWAPs_color, textcolor=show_Live24VWAPs_text, style=NoLabelOption, size=LabelSize)
label.delete(vwapValueLabel_24_15[1])


///////////////////////////////

///////////////////////////////

//Monthly Open
mOpen = request.security(syminfo.tickerid, 'M', open, lookahead=barmerge.lookahead_on)
pmOpen = request.security(syminfo.tickerid, 'M', open[1], lookahead=barmerge.lookahead_on)

pmHigh = request.security(syminfo.tickerid, 'M', high[1], lookahead=barmerge.lookahead_on)
pmLow = request.security(syminfo.tickerid, 'M', low[1], lookahead=barmerge.lookahead_on)


//Weekly Open
wOpen = request.security(syminfo.tickerid, 'W', open, lookahead=barmerge.lookahead_on)
pwOpen = request.security(syminfo.tickerid, 'W', open[1], lookahead=barmerge.lookahead_on)


//Previous Day Open High Low
dOpen = request.security(syminfo.tickerid, 'D', open, lookahead=barmerge.lookahead_on)
pdOpen = request.security(syminfo.tickerid, 'D', open[1], lookahead=barmerge.lookahead_on)
dbyOpen = request.security(syminfo.tickerid, 'D', open[2], lookahead=barmerge.lookahead_on)

pdHigh = request.security(syminfo.tickerid, 'D', high[1], lookahead=barmerge.lookahead_on)
pdLow = request.security(syminfo.tickerid, 'D', low[1], lookahead=barmerge.lookahead_on)
pdEQ = (pdHigh + pdLow) / 2

pwHigh = request.security(syminfo.tickerid, 'W', high[1], lookahead=barmerge.lookahead_on)
pwLow = request.security(syminfo.tickerid, 'W', low[1], lookahead=barmerge.lookahead_on)
pwEQ = (pwHigh + pwLow) / 2

//Current Day High Low
var Yesterday = 0
var DailyHigh = 0.0
var DailyLow = 0.0

Today = time('D')
CheckDay = Today != Yesterday
Yesterday := Today
DailyHigh := CheckDay or high > DailyHigh ? high[0] : DailyHigh
DailyLow := CheckDay or low < DailyLow ? low[0] : DailyLow



/// Input to show Lines and Labels for right of price in reference to the above
ExtendAxisLine = input.bool(false, title='Extend Axis value lines across chart', group='Daily, Weekly, Monthly, EQ Price Axis', tooltip='-d = Daily, w = Weekly, m = Monthly, p = Previous, dby = Day Before Yesterday')

ExtendOption = ExtendAxisLine ? extend.both : extend.right

PriceDaily = input.bool(true, title='- pdHigh - pdLow - pdEQ', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Daily 1')
showdOpen = input.bool(false, title='- dOpen', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Daily')
showdLow = input.bool(false, title='- dLow', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Daily')
showdHigh = input.bool(false, title='- dHigh', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Daily')
showpdOpen = input.bool(false, title='- pdOpen', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Daily')
showdbyOpen = input.bool(false, title='- dbyOpen', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Daily')

PriceWeekly = input.bool(true, title='- pwEQ', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Weekly')
showwOpen = input.bool(false, title='- wOpen', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Weekly')
showpwOpen = input.bool(false, title='- pwOpen', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Weekly')
showpwHigh = input.bool(false, title='- pwHigh', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Weekly')
showpwLow = input.bool(false, title='- pwLow', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Weekly')

showpmOpen = input.bool(false, title='- mOpen', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Monthly')
showmOpen = input.bool(false, title='- pmOpen', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Monthly')
showpmHigh = input.bool(false, title='- pmHigh', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Monthly')
showpmLow = input.bool(false, title='- pmLow', group='Daily, Weekly, Monthly, EQ Price Axis', inline='Monthly')


// Line Var
var line pmHighLine = na
var line pmLowLine = na
var line mOpenLine = na
var line pmOpenLine = na
var line pwHighLine = na
var line pwLowLine = na
var line wOpenLine = na
var line pwOpenLine = na
var line pdOpenLine = na
var line dOpenLine = na
var line dbyOpenLine = na
var line pdHighLine = na
var line pdLowLine = na
var line pdEQLine = na
var line pwEQLine = na
var line dLowLine = na
var line dHighLine = na



//Label Var
var label pmHighLabel = na
var label pmLowLabel = na
var label mOpenLabel = na
var label pmOpenLabel = na
var label pwHighLabel = na
var label pwLowLabel = na
var label wOpenLabel = na
var label pwOpenLabel = na
var label dOpenLabel = na
var label pdOpenLabel = na
var label dbyOpenLabel = na
var label pdHighLabel = na
var label pdLowLabel = na
var label pdEQLabel = na
var label pwEQLabel = na
var label dLowLabel = na
var label dHighLabel = na


//Create Line
if PriceDaily

    pdHighLine := line.new(bar_index[1], pdHigh, bar_index, pdHigh, color=DanCCDailyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)
    pdLowLine := line.new(bar_index[1], pdLow, bar_index, pdLow, color=DanCCDailyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)
    pdEQLine := line.new(bar_index[1], pdEQ, bar_index, pdEQ, color=DanCCDailyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)

//Create Label
    pdHighLabel := label.new(bar_index, pdHigh, text='                                                                                              pdHigh - ' + str.tostring(pdHigh), color=DanCCDailyInputColor, textcolor=DanCCDailyInputColor, style=label.style_none, size=size.normal, xloc=xloc.bar_index, textalign=text.align_right)
    pdLowLabel := label.new(bar_index, pdLow, text='                                                                                                pdLow - ' + str.tostring(pdLow), color=DanCCDailyInputColor, textcolor=DanCCDailyInputColor, style=label.style_none, size=size.normal, xloc=xloc.bar_index, textalign=text.align_right)
    pdEQLabel := label.new(bar_index, pdEQ, text='                                                                                                  pdEQ - ' + str.tostring(pdEQ), color=DanCCDailyInputColor, textcolor=DanCCDailyInputColor, style=label.style_none, size=size.normal, xloc=xloc.bar_index, textalign=text.align_right)

//Delete Line
    line.delete(pdHighLine[1])
    line.delete(pdLowLine[1])
    line.delete(pdEQLine[1])

//Delete Label    
    label.delete(pdHighLabel[1])
    label.delete(pdLowLabel[1])
    label.delete(pdEQLabel[1])


/////////////////////Weekly
if PriceWeekly
    pwEQLine := line.new(bar_index[1], pwEQ, bar_index, pwEQ, color=DanCCWeeklyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)
//Create Label
    pwEQLabel := label.new(bar_index, pwEQ, text='                                                                                                                                                           pwEQ - ' + str.tostring(pwEQ), color=DanCCWeeklyInputColor, textcolor=DanCCWeeklyInputColor, style=label.style_none, size=size.normal, xloc=xloc.bar_index)
//Delete Line
    line.delete(pwEQLine[1])
//Delete Label    
    label.delete(pwEQLabel[1])

//Create Line
if showpwHigh
    pwHighLine := line.new(bar_index[1], pwHigh, bar_index, pwHigh, color=DanCCWeeklyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)
//Delete Line
    line.delete(pwHighLine[1])
//Create Label
    pwHighLabel := label.new(bar_index, pwHigh, text='                                                                                                                                                           pwHigh - ' + str.tostring(pwHigh), color=DanCCWeeklyInputColor, textcolor=DanCCWeeklyInputColor, style=label.style_none, size=size.normal, xloc=xloc.bar_index)
//Delete Label    
    label.delete(pwHighLabel[1])


//Create Line
if showpwLow
    pwLowLine := line.new(bar_index[1], pwLow, bar_index, pwLow, color=DanCCWeeklyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)
//Delete Line
    line.delete(pwLowLine[1])
//Create Label
    pwLowLabel := label.new(bar_index, pwLow, text='                                                                                                                                                           pwLow - ' + str.tostring(pwLow), color=DanCCWeeklyInputColor, textcolor=DanCCWeeklyInputColor, style=label.style_none, size=size.normal, xloc=xloc.bar_index)
//Delete Label    
    label.delete(pwLowLabel[1])




////////////////////Monthly
if showmOpen
    mOpenLine := line.new(bar_index[1], mOpen, bar_index, mOpen, color=DanCCMonthlyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)
//Create Label
    mOpenLabel := label.new(bar_index, mOpen, text='                                                                                                                                                                                                                      mOpen - ' + str.tostring(mOpen), color=DanCCMonthlyInputColor, textcolor=DanCCMonthlyInputColor, style=label.style_none, size=size.normal, xloc=xloc.bar_index)
//Delete Line
    line.delete(mOpenLine[1])
//Delete Label    
    label.delete(mOpenLabel[1])

if showpmOpen
    pmOpenLine := line.new(bar_index[1], pmOpen, bar_index, pmOpen, color=DanCCMonthlyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)
//Create Label
    pmOpenLabel := label.new(bar_index, pmOpen, text='                                                                                                                                                                                                                      pmOpen - ' + str.tostring(pmOpen), color=DanCCMonthlyInputColor, textcolor=DanCCMonthlyInputColor, style=label.style_none, size=size.normal, xloc=xloc.bar_index)
//Delete Line
    line.delete(pmOpenLine[1])
//Delete Label    
    label.delete(pmOpenLabel[1])

//Create Line
if showpmHigh
    pmHighLine := line.new(bar_index[1], pmHigh, bar_index, pmHigh, color=DanCCMonthlyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)
//Delete Line
    line.delete(pmHighLine[1])
//Create Label
    pmHighLabel := label.new(bar_index, pmHigh, text='                                                                                                                                                                                                                      pmHigh - ' + str.tostring(pmHigh), color=DanCCMonthlyInputColor, textcolor=DanCCMonthlyInputColor, style=label.style_none, size=size.normal, xloc=xloc.bar_index)
//Delete Label    
    label.delete(pmHighLabel[1])



//Create Line
if showpmLow
    pmLowLine := line.new(bar_index[1], pmLow, bar_index, pmLow, color=DanCCMonthlyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)
//Delete Line
    line.delete(pmLowLine[1])
//Create Label
    pmLowLabel := label.new(bar_index, pmLow, text='                                                                                                                                                                                                                      pmLow - ' + str.tostring(pmLow), color=DanCCMonthlyInputColor, textcolor=DanCCMonthlyInputColor, style=label.style_none, size=size.normal, xloc=xloc.bar_index)
//Delete Label    
    label.delete(pmLowLabel[1])



/////////Optional Levels

if showdOpen
    dOpenLine := line.new(bar_index[1], dOpen, bar_index, dOpen, color=DanCCDailyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)
    dOpenLabel := label.new(bar_index, dOpen, text='                                                                                              dOpen - ' + str.tostring(dOpen), color=DanCCDailyInputColor, textcolor=DanCCDailyInputColor, style=label.style_none, size=size.normal, xloc=xloc.bar_index, textalign=text.align_right)
    line.delete(dOpenLine[1])
    label.delete(dOpenLabel[1])



if showdbyOpen
    dbyOpenLine := line.new(bar_index[1], dbyOpen, bar_index, dbyOpen, color=DanCCDailyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)
    dbyOpenLabel := label.new(bar_index, dbyOpen, text='                                                                                              dbyOpen - ' + str.tostring(dbyOpen), color=DanCCDailyInputColor, textcolor=color.blue, style=label.style_none, size=size.normal, xloc=xloc.bar_index, textalign=text.align_right)
    line.delete(dbyOpenLine[1])
    label.delete(dbyOpenLabel[1])

if showpdOpen
    pdOpenLine := line.new(bar_index[1], pdOpen, bar_index, pdOpen, color=DanCCDailyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)
    pdOpenLabel := label.new(bar_index, pdOpen, text='                                                                                              pdOpen - ' + str.tostring(pdOpen), color=DanCCDailyInputColor, textcolor=DanCCDailyInputColor, style=label.style_none, size=size.normal, xloc=xloc.bar_index, textalign=text.align_right)
    line.delete(pdOpenLine[1])
    label.delete(pdOpenLabel[1])

if showwOpen
    wOpenLine := line.new(bar_index[1], wOpen, bar_index, wOpen, color=DanCCWeeklyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)
    wOpenLabel := label.new(bar_index, wOpen, text='                                                                                                                                                           wOpen - ' + str.tostring(wOpen), color=DanCCWeeklyInputColor, textcolor=DanCCWeeklyInputColor, style=label.style_none, size=size.normal, xloc=xloc.bar_index)
    line.delete(wOpenLine[1])
    label.delete(wOpenLabel[1])

if showpwOpen
    pwOpenLine := line.new(bar_index[1], pwOpen, bar_index, pwOpen, color=DanCCWeeklyInputColor, style=line.style_dashed, width=1, extend=ExtendOption)
    pwOpenLabel := label.new(bar_index, pwOpen, text='                                                                                                                                                           pwOpen - ' + str.tostring(pwOpen), color=DanCCWeeklyInputColor, textcolor=DanCCWeeklyInputColor, style=label.style_none, size=size.normal, xloc=xloc.bar_index)
    line.delete(pwOpenLine[1])
    label.delete(pwOpenLabel[1])


if showdLow
    dLowLine := line.new(bar_index[1], DailyLow, bar_index, DailyLow, color=color.white, style=line.style_solid, width=1, extend=ExtendOption)
    dLowLabel := label.new(bar_index, DailyLow, text='                                                                                              dLow - ' + str.tostring(DailyLow), color=color.white, textcolor=color.white, style=label.style_none, size=size.normal, xloc=xloc.bar_index, textalign=text.align_right)
    line.delete(dLowLine[1])
    label.delete(dLowLabel[1])

if showdHigh
    dHighLine := line.new(bar_index[1], DailyHigh, bar_index, DailyHigh, color=color.white, style=line.style_solid, width=1, extend=ExtendOption)
    dHighLabel := label.new(bar_index, DailyHigh, text='                                                                                              dHigh - ' + str.tostring(DailyHigh), color=color.white, textcolor=color.white, style=label.style_none, size=size.normal, xloc=xloc.bar_index, textalign=text.align_right)
    line.delete(dHighLine[1])
    label.delete(dHighLabel[1])

